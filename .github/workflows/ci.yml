name: Elixir CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    name: Build and Lint
    runs-on: ubuntu-latest

    strategy:
      matrix:
        elixir: [1.13.0]
        otp: [24.1.7]
        database-user:
          - postgres
        database-password:
          - postgres

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: ${{ matrix.database-user }}
          POSTGRES_PASSWORD: ${{ matrix.database-password }}
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options:
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5 

    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-beam@988e02bfe678367a02564f65ca2e37726dc0268f
      with:
        elixir-version: ${{ matrix.elixir }}
        otp-version: ${{ matrix.otp }}
    - name: Restore dependencies cache
      uses: actions/cache@v2
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
        restore-keys: ${{ runner.os }}-mix-
    - name: Install dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: mix deps.get
    - name: Check Formatting
      run: mix format --check-formatted
    - name: Run Credo
      run: mix credo --strict
    - name: Retrieve PLT Cache
      uses: actions/cache@v2
      id: plt-cache
      with:
        path: priv/plts
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-plts-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    - name: Create PLTs
      if: steps.plt-cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p priv/plts
        mix dialyzer --plt
    - name: Run dialyzer
      run: mix dialyzer --no-check
    - name: Run tests
      run: mix test
